NOTE 1
=============================================
The seven rules of a great Git commit message

Separate subject from body with a blank line.
Limit the subject line to 50 characters.
Capitalise the subject line.
Do not end the subject line with a period.
Use the imperative mood in the subject line.
Wrap the body at 72 characters.
Use the body to explain what and why vs. how.
==============================================


STEP BY STEP MANUAL
==============================================

"Always in your local repo directory"


Check on files changed => git status


Check on commit history => git log (all commits) / git log --oneline (note commit hash number)


Stage => git add FILENAME (specific to one file changed) / git add . (For all files changed)


Commit => git commit -m "Your message => refer to above NOTE 1"


"Use Github desktop to link your local repo to your Github account previously defined repo"


Push => git push => enter user and pass => refresh GitHub account to see changes

- `control + L`: clear terminal package
- `git branch`: shows my working branch highlighted in green as well as other local branches
- `git log`: shows messages of my previous commits
- `git log`: shows above in a better look
- `git commit -m "message": put a message on my committed file
- `git log --oneline`: shows the recent commits in your project directory, each commit is presented with a "hash" number
- `git branch`: shows all the available branches in your directory
- `git branch experiment`: to make a new branch named "experiment" & `git checkout experiment`: to switch to the branch "experiment"
- `git checkout -b experiment`: do the above two separate commands simultaneously
-  `git commit -am "Update README"`: this will commit changes only to the branch, nothing changes in the master branch version
- remember to commit all changes in your branch before checking out to the master branch again
- `git branch -d experiment`: to delete the branch "experiment"
- first check you are in master branch with:  `git checkout master`, then `git merge experiment`: to merge changes you committed in experiment branch with the same file in master branch
- `git merge --abort`: to cancel merge due to conflict
- from Code tab in your GitHub repo clone a project
- use `git pull origin master` to get changes in the repo, changes will be merged with your local repo, fix the conflicts, use `git add .` and `git commit --no-edit` using a default commit message or common `git commit -m "your message"` to apply your changes and then `git push origin master` to add your changes
- use `git push -u origin "your new branch/feature"` to push new branch enabling tracking 
