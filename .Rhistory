)
# filter to buildings from 2010 and later
new_buildings2010 <- all_permits %>%
filter(
PermitTypeDesc == "New",
PermitClass != "N/A",  #!= not equal
as.Date(all_permits$IssuedDate) >= as.Date("2010-01-01") # filter rows from IssudeDate columns after or on date of 2018-01-01
)
View(new_buildings2010)
####### help commands
? substr
# want to count number of permits per year in new_buildings2010
new_buildings2010 <- new_buildings2010 %>%
mutate(year = substr(IssuedDate, 1, 4))  # extract the year from IssuedDate columns by using substr command that start character is the 1st character and end character is the 4th character
View(new_buildings2010)
# count number of permits per year
by_year <- new_buildings2010 %>%
group_by(year) %>%
count()
View(by_year)
plot_ly(
by_year,
x = ~year,
y = ~n,
type = "bar",
alpha = 0.7, # adjust the opacity of bar
hovertext = "y", # show the y value when hover on a bar
) %>%
layout(
title = " Number of New Building Permits per year in Seattle",
xaxis = list(title = "Year"), # show x-axis name of Year but also show each year
yaxis = list(title = "Number of Permits")
)
plot_ly(
data = by_year,
x = ~year,
y = ~n,
type = "bar",
alpha = 0.7, # adjust the opacity of bar
hovertext = "y", # show the y value when hover on a bar
) %>%
layout(
title = " Number of New Building Permits per year in Seattle",
xaxis = list(title = "Year"), # show x-axis name of Year but also show each year
yaxis = list(title = "Number of Permits")
)
plot_ly(
data = by_year,
x = ~year,
y = ~n,
type = "bar",
alpha = 0.7, # adjust the opacity of bar
hovertext = "y", # show the y value when hover on a bar
)
plot_ly(
data = by_year,
x = ~year,
y = ~n,
type = "bar",
alpha = 0.7, # adjust the opacity of bar
hovertext = "y", # show the y value when hover on a bar
)
plot_ly(
data = by_year,
x = ~year,
y = ~n,
type = "bar",
alpha = 0.7, # adjust the opacity of bar
hovertext = "y", # show the y value when hover on a bar
)
plot_ly(
data = by_year,
x = ~year,
y = ~n,
type = "bar",
alpha = 0.7, # adjust the opacity of bar
hovertext = "y", # show the y value when hover on a bar
)
library("plotly")
plot_ly(
data = by_year,
x = ~year,
y = ~n,
type = "bar",
alpha = 0.7, # adjust the opacity of bar
hovertext = "y", # show the y value when hover on a bar
)
plot_ly(
data = by_year,
x = ~year,
y = ~n,
type = "bar",
alpha = 0.7, # adjust the opacity of bar
hovertext = "y" # show the y value when hover on a bar
) %>%
layout(
title = " Number of New Building Permits per year in Seattle",
xaxis = list(title = "Year"), # show x-axis name of Year but also show each year
yaxis = list(title = "Number of Permits")
)
plot_ly(
data = by_year,
x = ~year,
y = ~n,
type = "bar",
alpha = 0.7, # adjust the opacity of bar
#hovertext = "y" # show the y value when hover on a bar
) %>%
layout(
title = " Number of New Building Permits per year in Seattle",
xaxis = list(title = "Year"), # show x-axis name of Year but also show each year
yaxis = list(title = "Number of Permits")
)
plot_ly(
data = by_year,
x = ~year,
y = ~n,
type = "bar",
alpha = 0.7 # adjust the opacity of bar
#hovertext = "y" # show the y value when hover on a bar
) %>%
layout(
title = " Number of New Building Permits per year in Seattle",
xaxis = list(title = "Year"), # show x-axis name of Year but also show each year
yaxis = list(title = "Number of Permits")
)
? hovertext
??hovertext
? layout
plot_ly(
data = by_year,
x = ~year,
y = ~n,
type = "bar",
alpha = 0.7, # adjust the opacity of bar
hoverinfo = "y" # show the y value when hover on a bar
) %>%
layout(
title = " Number of New Building Permits per year in Seattle",
xaxis = list(title = "Year"), # show x-axis name of Year but also show each year
yaxis = list(title = "Number of Permits")
)
View(new_buildings2010)
# plotting leaflet map with circle markers
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,  # remove border from each circle
popup = ~Description
)
# leaflet map with colored circles nad legend
platten_fn <- colorFactor(palette = "Set3", domain = new_buildings2010$PermitClass) # a function to make a clor based on the PermitClass column
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~platten_fn(PermitClass)
)
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass)
) %>%
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 1
)
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass),
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 1
)
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass)) %>%
addLegend(
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass)
) %>%
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 1
)
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass)
)
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 1
)
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass)
) %>%
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 1
)
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 1
)
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass)
) %>%
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 1
)
# leaflet map with colored circles and legend
palette_fn <- colorFactor(palette = "Set3", domain = new_buildings2010$PermitClass) # a function to make a color based on the PermitClass column
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass)
) %>%
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 1
)
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass)
) %>%
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 3
)
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass)
) %>%
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 3
)
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass)
) %>%
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 2
)
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass)
) %>%
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 1
)
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass)
radius = 20,
fillOpacity = 0.5
) %>%
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 1
)
leaflet(new_buildings2010) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.3321, lat = 47.6062, zoom = 10) %>%
addCircles(
lat = ~Latitude,
lng = ~Longitude,
stroke = FALSE,
popup = ~Description,
color = ~palette_fn(PermitClass),
radius = 20,
fillOpacity = 0.5
) %>%
addLegend(
position = "bottomright",
title = "New Buildings in Seattle",
pal = palette_fn,
values = ~PermitClass,
opacity = 1
)
print(fruits)
fruits <- c("orange", "apple", "apricot", "bananas")
print(fruits)
knitr::opts_chunk$set(echo = TRUE)
source("test_for_RMarkdown.R")
plot(pressure)
source("test_for_RMarkdown.R")
summary(cars)
source("test_for_RMarkdown.R")
print(fruits)
source("test_for_RMarkdown.R")
print(fruits)
# all the X2010-2018 columns are in string format however they should be converted to numbers
expenditure_plot_data_noNA$X2010 <- as.numeric(expenditure_plot_data_noNA$X2010)
setwd("~/Desktop/r_project")
library("dplyr")
library("tidyverse")
library("ggrepel")
library("naniar")
library('scales') # adding this library removed the error: Error in check_breaks_labels(breaks, labels) : object 'percent' not found
wb_data <- read.csv(
"world_bank_data.csv",
stringsAsFactors = F
# skip = 3 to skip the first 5 rows of data
)
View(wb_data)
####### help commands
? midwest
library("ggplot2")
library("hexbin")
library("tidyr")
library("ggrepel")
install.packages("maps")
install.packages("maps")
library("maps")
library("mapproj")
library("devtools")
library(rjson)
library(digest)
library(glue)
library("ggmap")
ggplot(midwest) +  # this will plot a blank canvas, the layers on canvas are added with "+"
geom_point(mapping = aes( # there are a list of geom_functions that can be called by geom_"some function", here geom_point present each data point with a dot
x = percollege, y = percadultpoverty # aes define x and y axis, if the labels are strings you can use aes_string() instead
))
ggplot(midwest) +
geom_col(mapping = aes(x = state, y = poptotal))
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty)) # error: Package `hexbin` required for `stat_binhex`, so installed package above
library("ggplot2")
library("ggplot2")
source("test_for_RMarkdown.R")
library("ggplot2")
fruits <- c("**orange**", "**apple**", "apricot", "bananas")
ggplot(midwest) +  # this will plot a blank canvas, the layers on canvas are added with "+"
geom_point(mapping = aes( # there are a list of geom_functions that can be called by geom_"some function", here geom_point present each data point with a dot
x = percollege, y = percadultpoverty # aes define x and y axis, if the labels are strings you can use aes_string() instead
))
library("dplyr")
library("tidyr")
library(glue)
library("ggplot2")
ggplot(midwest) +  # this will plot a blank canvas, the layers on canvas are added with "+"
geom_point(mapping = aes( # there are a list of geom_functions that can be called by geom_"some function", here geom_point present each data point with a dot
x = percollege, y = percadultpoverty # aes define x and y axis, if the labels are strings you can use aes_string() instead
))
library("ggplot2")
library("dplyr")
library("tidyr")
library("ggrepel")
ggplot(midwest) +  # this will plot a blank canvas, the layers on canvas are added with "+"
geom_point(mapping = aes( # there are a list of geom_functions that can be called by geom_"some function", here geom_point present each data point with a dot
x = percollege, y = percadultpoverty # aes define x and y axis, if the labels are strings you can use aes_string() instead
))
ggplot(midwest) +
geom_point(mapping = aes(
x = percollege, y = percadultpoverty, color = state)
) +
scale_color_brewer(palette = "Set3")
fruits <- c("**orange**", "**apple**", "apricot", "bananas")
library("ggplot2")
fruits <- c("**orange**", "**apple**", "apricot", "bananas")
ggplot(midwest) +
geom_point(mapping = aes(
x = percollege, y = percadultpoverty, color = state)
) +
scale_color_brewer(palette = "Set3")
install.packages("ggplot2")
library("ggplot2")
source("test_for_RMarkdown.R")
print(fruits)
cat(fruits)
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
source("test_for_RMarkdown.R")
print(fruits)
cat(fruits)
ggplot(midwest) +
geom_point(mapping = aes(
x = percollege, y = percadultpoverty, color = state)
) +
scale_color_brewer(palette = "Set3")
source("test_for_RMarkdown.R")
print(fruits)
cat(fruits)
install.packages("ggplot2")
source("test_for_RMarkdown.R")
print(fruits)
cat(fruits)
source("test_for_RMarkdown2.R")
source("test_for_RMarkdown2.R")
install.packages("vitae")
