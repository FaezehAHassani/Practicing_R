title <- "Dr"
startsWith(full_name, title)
full_name <- "Dr faezeh arab hassani"
title <- "Dr"
startsWith(full_name, title)
add_title <- function(full_name, title) {
if (startsWith(full_name, title)) {
return(full_name)
}
name_with_title <- paste(title, full_name)
name_with_title
}
add_title(full_name, title)
#vector
people <- c("ana", "ellen", "adam")
print(people)
#vector
people <- c("ana", "ellen", "adam")
print(people)
v1 <- c(1, 2, 3, 4)
v2 <- c(-1, 0, 8, -100)
v3 <- v1 + v2
print(v3)
# un-equal vectors
v1 <- c(1, 2)
v2 <- c(-1, 0, 8, -100)
v3 <- v1 + v2
print(v3)
#add a scalar to a vector
v2 <- c(-1, 0, 8, -100)
v3 <- 5 + v2
print(v3)
lenght(v3)
nchar(v3)
length(v3)
name <- "faezeh"
nchar(name)
length(name)
v1 <- c(1.34, 0.9998, 100.971, -19)
v2 <- round(v1, 2)
print(v2)
v1 <- c(1.34, 0.9998, 100.971, -19)
v2 <- round(v1, 2)
v3 <- nchar(v1)
print(v2)
print(v3)
colors <- c("green", "blue")
locations <- c("sky", "grass")
band <- paste(locations, colors)
print(band)
colors <- c("green", "blue")
locations <- c("sky", "grass")
band <- paste(locations, colors, sep = "")
print(band)
print(peaple [1])
#vector
people <- c("ana", "ellen", "adam")
print(people)
print(peaple [1])
print(people [1])
print(people [2])
print(people [4])
all_but_adam <- people [-3]
print(all_but_adam)
print(peaople[2:3])
print(people[2:3])
indices <- c(1,3)
print(people(indices))
people <- c("ana", "ellen", "adam")
print(people)
print(people[1])
print(people[2])
print(people[4]) #returns NA
all_but_adam <- people[-3] # to exclude index 3: adam
print(all_but_adam) # return "ana"   "ellen"
print(people[2:3])
indices <- c(1,3)
print(people(indices))
print(people[indices])
#vector filtering
perfect_number <- c(1, 3, 6.0, 22, 36)
filter <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
print(perfect_number[filter])
shoe_size <- c(3, 4.5, 6, 9, 2.5)
small_shoe_size <- shoe_size < 4.5
print(shoe_size[small_shoe_size])
prices <- c(20, 30, 40)
new_price <- 45
new_index <- lenght(prices) + 1
prices[1] <- 20.1
prices[new_index] <- 45
length(prices)
new_price <- 45
new_index <- lenght(prices) + 1
new_index <- length(prices) + 1
prices[1] <- 20.1
prices[new_index] <- 45
print(prices)
prices <- c(20, 30, 40)
length(prices)
new_price <- 45
new_index <- length(prices) + 1
prices[1] <- 20.1 # modify index 1
prices[new_index] <- 45 # add inedex 4
print(prices)
print(prices)
prices <- c(20, 30, 40)
prices[1, 2] <- c(20.2, 30.1)
prices[c(1, 2)] <- c(20.2, 30.1)
print(prices)
prices <- c(20, 30, 40)
length(prices)
new_price <- 45
new_index <- length(prices) + 1
prices[1] <- 20.1 # modify index 1
prices[new_index] <- 45 # add inedex 4
print(prices)
prices[c(1, 2)] <- c(20.2, 30.1)
print(prices)
prices <- c(20, 30, 40)
length(prices)
new_price <- 45
new_index <- length(prices) + 1
prices[1] <- 20.1 # modify index 1
prices[new_index] <- 45 # add inedex 4
print(prices)
prices[c(1, 2)] <- c(20.2, 30.1)
print(prices)
prices[c(1, 2)] <- c(20.2, 30.1)
print(prices)
prices <- c(20, 30, 40)
prices[c(1, 2)] <- c(20.2, 30.1)
print(prices)
prices[new_index] <- 45 # add inedex 4
print(prices)
prices <- c(20, 30, 40)
prices <- c(20, 30, 40)
length(prices)
new_price <- 45
new_index <- length(prices) + 1
prices[1] <- 20.1 # modify index 1
prices[new_index] <- 45 # add inedex 4
print(prices)
prices[c(1, 2)] <- c(20.2, 30.1)
print(prices)
people[c(2,3)] <- c("emma", "gerald")
print(people)
people[4] <- jim
people[4] <- jim
people[c(2,3)] <- c("emma", "gerald")
people[4] <- "jim"
print(people)
people[c(2,3)] <- c("emma", "gerald")
people[5] <- "jim"
print(people)
people[c(2,3)] <- c("emma", "gerald")
#vector
people <- c("ana", "ellen", "adam")
people[5] <- "jim"
more_people <- c(peaple, "faezeh")
print(more_people)
people[c(2,3)] <- c("emma", "gerald")
people[5] <- "jim" #if no index 4 is available and you are adding index 5, returns NA for index 4
print(people)
more_people <- c(peaple, "faezeh")
print(more_people)
more_people <- c(people, "faezeh")
print(more_people)
v4 <- c(0, 10, 5, 220, 1.1, 2, 5, 20, 2.5, 4)
v4[v4 > 10] <- 10
print(v4)
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE
)
person_alternative <- list("bob fallon", "painter", 1000, TRUE)
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE,
favourite = list(
food = "pizza",
music = "jazz"
)
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE,
favourite = list(
food = "pizza",
music = "jazz"
)
)
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE,
favourite = list(
food = "pizza",
music = "jazz"
)
)
names(job)
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE,
favourite = list( # if don't space for the next list inside list, it will not return a list under current list but a seperate list
food = "pizza",
music = "jazz"
)
)
person$job
person[[1]]
person[[5]]
person[["food"]]
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE,
favourite = list( # if don't space for the next list inside list, it will not return a list under current list but a seperate list
food = "pizza",
music = "jazz"
)
)
person[["food"]]
person[["music"]]
person[["salary"]]
person$job$food
job$food
person$job
person_job <- person$job
person_job$food
person_favourite <- person$favourite
person_favourite$food
person$job
job_post <- list(
qualification = list(
experience = "5 years",
bsc_degree = TRUE
),
skills = c("metlab", "r", "tcad")
)
)
)
job_qualifications <- job_post$qualification
job_qualifications$skills
job_qualifications$bsc_degree
#or
job_post$qualification$bsc_degree
job_post$skills[3]
person$age
person$age <- 40
person$age
person$job <- "senior engineer"
print(person$job)
person$salary <- person$salary * 2
print(person$salary)
person$full_name <- NULL # for security reasons remove full_name
print(person$full_name)
person$full_name <- paste("ellen", "kimmel")
person[[job]]
person[["job"]]
is.list(person[["job"]])
#add a vector function e.g. paste to all the elements of a list
people_2 <- list("emma", ",mat", "jack", "gil")
people_2_vectorise <- lapply(people_2, toupper)
#add a vector function e.g. paste to all the elements of a list
people_2 <- list("emma", "mat", "jack", "gil")
people_2_upper_case <- lapply(people_2, toupper) #make names upper case
people_2_party <- lapply(people_2, paste, "")
people_2_party <- lapply(people_2, paste, "dances")
greet <- function(item) {
paste ("Hello", item)
}
greetings <- lapply(people_2, greet)
sapply(people, greet)
# create data frame
people <- data.frame(
name = c("ebi", "elena", "roy" , "jade", "mark"),
weight = c(40, 50, 75, 48, 80),
heigth = c(157, 200, 159, 170, 190),
)
# create data frame
people <- data.frame(
name = c("ebi", "elena", "roy" , "jade", "mark"),
weight = c(40, 50, 75, 48, 80),
heigth = c(157, 200, 159, 170, 190)
)
View(people)
# create data frame
people <- data.frame(
name = c("ebi", "elena", "roy" , "jade", "mark"),
weight = c(40, 50, 75, 48, 80),
heigth = c(157, 200, 159, 170, 190),
sex = c("male", "female", "male", "male", "male", "male")
)
View(people)
# create data frame
people <- data.frame(
name = c("ebi", "elena", "roy" , "jade", "mark"),
weight = c(40, 50, 75, 48, 80),
heigth = c(157, 200, 159, 170, 190),
sex = c("male", "female", "male", "male", "male")
)
View(people)
people_sex <- people$sex
print(people_sex)
people_heigth <- people[["heigth"]]
print(people_heigth)
nrow(people)
ncol(people)
dim(people)
colnames(people)
colnames(people) # column names
rownames(people) # row names
head(people) # rturn first row sof dataframe as new data frame
# create data frame
people <- data.frame(
name = c("ebi", "elena", "roy" , "jade", "mark"),
weight = c(40, 50, 75, 48, 80),
heigth = c(157, 200, 159, 170, 190),
sex = c("male", "female", "male", "male", "male"),
age =c(20, 30, 50 , 80, 10)
)
head(people) # return first few rows of data frame as a new data frame
head(people) # return first few rows of data frame as a new data frame
# create data frame
people <- data.frame(
name = c("ebi", "elena", "roy" , "jade", "mark","abba"),
weight = c(40, 50, 75, 48, 80, 55),
heigth = c(157, 200, 159, 170, 190, 160),
sex = c("male", "female", "male", "male", "male", "female"),
age =c(20, 30, 50 , 80, 10, 37)
)
head(people) # return first few rows of data frame as a new data frame
tail(people) # return last few rows of data frame as a new data frame
View(people)
new_col_names <- c("first_name", "wieght", "heigth", "sex", "age")
colnames(people) <- new_col_names
View(people)
new_col_names <- c("first_name", "person_weight", "person_heigth", "person_sex", "person_age")
colnames(people) <- new_col_names
View(people)
# load flight data
install.packages("nycflights13")
library("nycflights13")
dim(flights)
colnames(flights)
View(flights)
View(airlines)
has_most_delays <- flights %<%
group_by(carrier)
has_most_delays <- flights %<%
group_by(carrier) %<%
has_most_delays <- flights %<%
group_by(carrier) %<%
View(flights)
has_most_delays <- flights %>%
group_by(carrier) %>%
View(flights)
has_most_delays <- flights %>%
group_by(carrier) %>%
filter(dep_delay > 0) %>%
summarise(num_delay = n()) %>%
filter(num_delay = max(num_delay)) %>%
select(carrier)
has_most_delays <- flights %>%
group_by(carrier) %>%
filter(dep_delay > 0) %>%
summarise(num_delay = n()) %>%
filter(num_delay = max(num_delay)) %>%
select(carrier)
has_most_delays <- flights %>%
group_by(carrier) %>%
filter(dep_delay > 0) %>%
summarise(num_delay = n()) %>%
filter(num_delay = max(num_delay)) %>%
select(carrier)
has_most_delays <- flights %>%
group_by(carrier) %>%
filter(dep_delay > 0) %>%
summarise(num_delay = n()) %>%
filter(num_delay = max(num_delay)) %>%
select(carrier)
View(flights)
# load flight data
install.packages("nycflights13")
library("nycflights13")
View(flights)
has_most_delays <- flights %>%
group_by(carrier) %>%
filter(dep_delay > 0) %>%
summarise(num_delay = n()) %>%
filter(num_delay = max(num_delay)) %>%
select(carrier)
has_most_delays <- flights %>%
group_by(carrier) %>%
filter(dep_delay > 0) %>%
summarise(num_delay = n()) %>%
filter(num_delay = max(num_delay)) %>%
select(carrier)
View(airlines) #another data frame containing the full name for the airlines
has_most_delays <- flights %>%
group_by(carrier) %>%
filter(dep_delay > 0) %>%
summarise(num_delay = n()) %>%
filter(num_delay = max(num_delay)) %>%
select(carrier)
# load flight data
install.packages("nycflights13")
library("nycflights13")
??flights # get help on the data frame information
dim(flights) # dimensions of the "flights" data set
colnames(flights) # column names
View(flights)
View(airlines) #another data frame containing the full name for the airlines
install.packages("nycflights13")
View(flights)
dim(flights) # dimensions of the "flights" data set
# load flight data
install.packages("nycflights13")
library("nycflights13")
??flights # get help on the data frame information
######### TIDYR ##################
########################################################
# install dplyr
install.packages("dplyr")
library("dplyr")
install.packages("tidyverse") # this package includes ggplot2 for visualisation
library("tidyverse")
install.packages("ggrepel") # to define geom_text_repel command
library("ggrepel")
wb_data <- read.csv(
"world_bank_data.csv",
stringsAsFactors = F
# skip = 3 to skip the first 5 rows of data
)
View(wb_data)
setwd("~/Desktop/project")
wb_data <- read.csv(
"world_bank_data.csv",
stringsAsFactors = F
# skip = 3 to skip the first 5 rows of data
)
View(wb_data)
install.packages("naniar")
library("naniar")
indicator_of_interest <- "Government expenditure on education, US$ (millions)"
expenditure_plot_data <- wb_data %>%
rename(indicator = Series) %>%
rename(X2010 = X2010..YR2010.) %>%
rename(X2013 = X2013..YR2013.) %>%
rename(X2014 = X2014..YR2014.) %>%
rename(X2015 = X2015..YR2015.) %>%
rename(X2016 = X2016..YR2016.) %>%
rename(X2017 = X2017..YR2017.) %>%
rename(X2018 = X2018..YR2018.) %>%
filter(indicator == indicator_of_interest)
# to replce ".." valuses in the data frame to NA
expenditure_plot_data <- expenditure_plot_data %>%
replace_with_na(replace = list(X2010 = c("..")))
View(expenditure_plot_data)
library('scales') # adding this library removed the error: Error in check_breaks_labels(breaks, labels) : object 'percent' not found
expenditure_chart <- ggplot(data = expenditure_plot_data) +
geom_point() + # add dots for data points
geom_text_repel( # add text on data points
mapping = aes(x = X2010 / 100, y = X2018 / 100, label = Country.Code)) +
scale_x_continuous(labels = percent) + scale_y_continuous(labels = percent) +
labs(title = indicator_of_interest, x = "Expenditure 2010", y = "Expenditure 2018")
expenditure_plot_data
# to replce ".." valuses in the data frame to NA
expenditure_plot_data <- expenditure_plot_data %>%
replace_with_na(replace = list(X2010 = c(".."))) %>%
replace_with_na(replace = list(X2013 = c(".."))) %>%
replace_with_na(replace = list(X2014 = c(".."))) %>%
replace_with_na(replace = list(X2015 = c(".."))) %>%
replace_with_na(replace = list(X2016 = c(".."))) %>%
replace_with_na(replace = list(X2017 = c(".."))) %>%
replace_with_na(replace = list(X2018 = c("..")))
View(expenditure_plot_data)
expenditure_chart <- ggplot(data = expenditure_plot_data) +
geom_point() + # add dots for data points
geom_text_repel( # add text on data points
mapping = aes(x = X2010 / 100, y = X2018 / 100, label = Country.Code)) +
scale_x_continuous(labels = percent) + scale_y_continuous(labels = percent) +
labs(title = indicator_of_interest, x = "Expenditure 2010", y = "Expenditure 2018")
expenditure_plot_data
print(expenditure_plot_data)
debugSource('~/Desktop/project/syntax_tidyr.R', echo=TRUE)
mapping = aes(x = X2010 / 100, y = X2018 / 100, label = Country.Code)) +
scale_x_continuous(labels = percent) + scale_y_continuous(labels = percent) +
labs(title = indicator_of_interest, x = "Expenditure 2010", y = "Expenditure 2018")
expenditure_chart <- ggplot(data = expenditure_plot_data) +
geom_point() + # add dots for data points
geom_text_repel( # add text on data points
mapping = aes(x = X2010 / 100, y = X2018 / 100, label = Country.Code) +
scale_x_continuous(labels = percent) + scale_y_continuous(labels = percent) +
labs(title = indicator_of_interest, x = "Expenditure 2010", y = "Expenditure 2018")
expenditure_chart <- ggplot(data = expenditure_plot_data) +
geom_point() + # add dots for data points
geom_text_repel( # add text on data points
mapping = aes(x = X2010 / 100, y = X2018 / 100, label = Country.Code)) +
scale_x_continuous(labels = percent) + scale_y_continuous(labels = percent) +
labs(title = indicator_of_interest, x = "Expenditure 2010", y = "Expenditure 2018")
