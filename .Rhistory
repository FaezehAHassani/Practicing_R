people[5] <- "jim"
more_people <- c(peaple, "faezeh")
print(more_people)
people[c(2,3)] <- c("emma", "gerald")
people[5] <- "jim" #if no index 4 is available and you are adding index 5, returns NA for index 4
print(people)
more_people <- c(peaple, "faezeh")
print(more_people)
more_people <- c(people, "faezeh")
print(more_people)
v4 <- c(0, 10, 5, 220, 1.1, 2, 5, 20, 2.5, 4)
v4[v4 > 10] <- 10
print(v4)
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE
)
person_alternative <- list("bob fallon", "painter", 1000, TRUE)
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE,
favourite = list(
food = "pizza",
music = "jazz"
)
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE,
favourite = list(
food = "pizza",
music = "jazz"
)
)
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE,
favourite = list(
food = "pizza",
music = "jazz"
)
)
names(job)
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE,
favourite = list( # if don't space for the next list inside list, it will not return a list under current list but a seperate list
food = "pizza",
music = "jazz"
)
)
person$job
person[[1]]
person[[5]]
person[["food"]]
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE,
favourite = list( # if don't space for the next list inside list, it will not return a list under current list but a seperate list
food = "pizza",
music = "jazz"
)
)
person[["food"]]
person[["music"]]
person[["salary"]]
person$job$food
job$food
person$job
person_job <- person$job
person_job$food
person_favourite <- person$favourite
person_favourite$food
person$job
job_post <- list(
qualification = list(
experience = "5 years",
bsc_degree = TRUE
),
skills = c("metlab", "r", "tcad")
)
)
)
job_qualifications <- job_post$qualification
job_qualifications$skills
job_qualifications$bsc_degree
#or
job_post$qualification$bsc_degree
job_post$skills[3]
person$age
person$age <- 40
person$age
person$job <- "senior engineer"
print(person$job)
person$salary <- person$salary * 2
print(person$salary)
person$full_name <- NULL # for security reasons remove full_name
print(person$full_name)
person$full_name <- paste("ellen", "kimmel")
person[[job]]
person[["job"]]
is.list(person[["job"]])
#add a vector function e.g. paste to all the elements of a list
people_2 <- list("emma", ",mat", "jack", "gil")
people_2_vectorise <- lapply(people_2, toupper)
#add a vector function e.g. paste to all the elements of a list
people_2 <- list("emma", "mat", "jack", "gil")
people_2_upper_case <- lapply(people_2, toupper) #make names upper case
people_2_party <- lapply(people_2, paste, "")
people_2_party <- lapply(people_2, paste, "dances")
greet <- function(item) {
paste ("Hello", item)
}
greetings <- lapply(people_2, greet)
sapply(people, greet)
# create data frame
people <- data.frame(
name = c("ebi", "elena", "roy" , "jade", "mark"),
weight = c(40, 50, 75, 48, 80),
heigth = c(157, 200, 159, 170, 190),
)
# create data frame
people <- data.frame(
name = c("ebi", "elena", "roy" , "jade", "mark"),
weight = c(40, 50, 75, 48, 80),
heigth = c(157, 200, 159, 170, 190)
)
View(people)
# create data frame
people <- data.frame(
name = c("ebi", "elena", "roy" , "jade", "mark"),
weight = c(40, 50, 75, 48, 80),
heigth = c(157, 200, 159, 170, 190),
sex = c("male", "female", "male", "male", "male", "male")
)
View(people)
# create data frame
people <- data.frame(
name = c("ebi", "elena", "roy" , "jade", "mark"),
weight = c(40, 50, 75, 48, 80),
heigth = c(157, 200, 159, 170, 190),
sex = c("male", "female", "male", "male", "male")
)
View(people)
people_sex <- people$sex
print(people_sex)
people_heigth <- people[["heigth"]]
print(people_heigth)
nrow(people)
ncol(people)
dim(people)
colnames(people)
colnames(people) # column names
rownames(people) # row names
head(people) # rturn first row sof dataframe as new data frame
# create data frame
people <- data.frame(
name = c("ebi", "elena", "roy" , "jade", "mark"),
weight = c(40, 50, 75, 48, 80),
heigth = c(157, 200, 159, 170, 190),
sex = c("male", "female", "male", "male", "male"),
age =c(20, 30, 50 , 80, 10)
)
head(people) # return first few rows of data frame as a new data frame
head(people) # return first few rows of data frame as a new data frame
# create data frame
people <- data.frame(
name = c("ebi", "elena", "roy" , "jade", "mark","abba"),
weight = c(40, 50, 75, 48, 80, 55),
heigth = c(157, 200, 159, 170, 190, 160),
sex = c("male", "female", "male", "male", "male", "female"),
age =c(20, 30, 50 , 80, 10, 37)
)
head(people) # return first few rows of data frame as a new data frame
tail(people) # return last few rows of data frame as a new data frame
View(people)
new_col_names <- c("first_name", "wieght", "heigth", "sex", "age")
colnames(people) <- new_col_names
View(people)
new_col_names <- c("first_name", "person_weight", "person_heigth", "person_sex", "person_age")
colnames(people) <- new_col_names
View(people)
sum(1, 2, 1000)
nchar("what is the date?")
c(1, 2, 3)
seq(-1, 2)
"+" (2, 3) #means 2+3
full_name <- "Dr faezeh arab hassani"
title <- "Dr"
add_title(full_name, title) # example
startsWith(full_name, title) #gives True or Fulse
v3 <- nchar(v1)
print(v3)
person <- list(
full_name = "ellen adams",
job = "engineer",
salary = 2000,
permanent = TRUE,
favourite = list( # if don't space for the next list inside list, it will not return a list under current list but a seperate list
food = "pizza",
music = "jazz"
)
)
person$job
people[2:4, ] # return a data frame of rows 2 to 4 and all columns
people[2:4, "person_sex"] # return a data farme of rows 2 to 4 and column of person_sex
rownames(people) # row names
rownames(people) <- people$person_name
print(rownames(people))
rownames(people) <- people$first_name
print(rownames(people))
people[,c("person_heigth", "person_weigth")]
people[,c("person_weight", "person_heigth")]
people[people$person_age > 10] #return age above 10 for column person_age
people[people$person_age > 10, ] #return rows where person_age is above 10 for all columns
# define if people is a data frame or not
is.data.frame(people)
is.data.frame(v1)
as.data.frame(v1)
print(v1)
is.data.frame(v1)
as.data.frame(v1) # convert v1 from vector to data frame
print(v1)
is.data.frame(v1)
as.data.frame(v1) # convert v1 from vector to data frame
v1[2:3, ]
v1 <- c(1, 2, 3, 4)
as.data.frame(v1) # convert v1 from vector to data frame
v1 <- c(1, 2, 3, 4)
v2 <- c(-1, 0, 8, -100)
v3 <- v1 + v2
is.data.frame(v1) # define if v1 is data frame which is not so it returns FALSE
is.data.frame(v3) # define if v1 is data frame which is not so it returns FALSE
as.data.frame(v3) # convert v1 from vector to data frame
v3_data <- v3
is.data.frame(v3)
v1 <- c(1, 2, 3, 4)
v2 <- c(-1, 0, 8, -100)
v3 <- v1 + v2
print(v3)
is.data.frame(v3) # define if v1 is data frame which is not so it returns FALSE
vector_frame <- data.frame(
v1 = c(1, 2, 3, 4),
v2 = c(-1, 0, 8, -100),
as.data.frame(v3)
)
is.data.frame(v3)
is.data.frame(vector_frame)
# call foreign data frame from separate .csv files
my_df <- read.csv("new_data.csv", stringAsFactors = FALSE)
new_data <- read.csv("~/Desktop/project/new_data.csv")
View(new_data)
# call foreign data frame from separate .csv files
my_df <- read.csv("new_data.csv", stringAsFactors = FALSE)
print(new_data)
# call foreign data frame from separate .csv files
my_df <- read.csv("new_data.csv", stringAsFactors = FALSE)
# call foreign data frame from separate .csv files
my_df <- read.csv("new_data.csv", stringAsFactors = FALSE)
# call foreign data frame from separate .csv files
my_df <- read.csv("new_data.csv", stringsAsFactors = FALSE)
# call foreign data frame from separate .csv files
my_df <- read.csv("new_data2.csv", stringsAsFactors = FALSE)
# call foreign data frame from separate .csv files
my_df <- read.csv("new_data2.csv", stringsAsFactors = FALSE)
View(job_qualifications)
# Use call foreign data frame from separate .csv files
my_df <- read.csv("new_data2.csv", stringsAsFactors = FALSE)
View(my_df)
# write to the new data frame
write.csv(my_df, "new_data3.csv", row.names = FALSE) # row.names to remove the row names
View(my_df)
# Use File/New File/Text File, add your data frame rows and columns separated by comma, save file as .csv and run below to read such file files
my_df <- read.csv("new_data2.csv", stringsAsFactors = FALSE) # use stringsAsFactors to make sure strig data is a vector rather than a factor
View(my_df)
View(my_df)
# Use File/New File/Text File, add your data frame rows and columns separated by comma, save file as .csv and run below to read such file files
my_df <- read.csv("new_data2.csv", stringsAsFactors = FALSE) # use stringsAsFactors to make sure strig data is a vector rather than a factor
# write to the new data frame
write.csv(my_df, "new_data3.csv", row.names = FALSE) # row.names to remove the row names
View(my_df)
getwd()
getwd(my_df)
# Use File/New File/Text File, add your data frame rows and columns separated by comma, save file as .csv and run below to read such file files
my_df <- read.csv("new_data2.csv", stringsAsFactors = FALSE) # use stringsAsFactors to make sure strig data is a vector rather than a factor
View(my_df)
getwd(my_df)
pwd
getwd(new_data)
getwd()
setwd("~/Desktop/project")
# Use File/New File/Text File, add your data frame rows and columns separated by comma, save file as .csv and run below to read such file files
my_df <- read.csv("new_data2.csv", stringsAsFactors = FALSE) # use stringsAsFactors to make sure strig data is a vector rather than a factor
View(my_df)
# write to the new data frame
write.csv(my_df, "new_data3.csv", row.names = FALSE) # row.names to remove the row names
View(my_df)
print(people_sex)
is.factor(my_df$name)
# also by using as.factor we can turn string values to level thus return factor
shirt_size <- c("large", "medium", "small", "large", "small")
shirt_size_factor <- as.factor(shirt_size)
print(shirt_size_factor)
print(shirt_size)
length(shirt_size_factor)
print(num_factros)
print(num_factors)
num_factors <- as.factor(c(10, 20, 30, 10, 20 ,30, 40, 50))
print(num_factors)
num_factors * 2
num_factors[1] <- 60
print(shirt_size) # return "large"  "medium" "small"  "large"  "small"
is.factor(shirt_size)
bag <- c("leather", "cotton", "pvc", "cotton", "pvc", "leather")
cost <- c(1000, 200, 300, 250, 350, 1000)
bag_factor <- data.frame(bag, cost)
View(bag_factor)
is.factor(bag_factor$bag)
is.factor(bag_factor$cost)
bag_factor[1,2] <- 2000
bag_factor[1,1] <- "pvc"
bag_factor <- data.frame(bag, cost)
View(bag_factor)
View(bag_factor)
bag_factor[1,1] <- "pvc"
View(bag_factor)
is.factor(bag_factor$bag) # beacuse didn't use stringsAcFactor = FALSE it returns TRUE
View(bag_factor)
View(bag_factor)
bag_factor <- data.frame(bag, cost)
View(bag_factor)
bag_factor[1,1] <- "pvc"
View(bag_factor)
bag_factor[1,1] <- "pf"
# if change the above command to below it convert bag to vector
bag_factor <- data.frame(bag, cost, stringsAsFactors = FALSE)
is.factor(bag_factor$bag)
# if change the above command to below it convert bag to vector
bag_factor <- data.frame(bag, cost, stringsAsFactors = FALSE)
is.factor(bag_factor$bag)
View(bag_factor)
bag_factor[1,1] <- "pf"
View(bag_factor)
# take advantage of factor for splitting
bag <- c("leather", "cotton", "pvc", "cotton", "pvc", "leather")
cost <- c(1000, 200, 300, 250, 350, 1000)
bag_factor <- data.frame(bag, cost)
bag_factor_type <- split(bag_factor, bag_factor$bag)
View(bag_factor_type)
tapply(bag_factor$bag), bag_factor$cost, mean)
tapply(bag_factor$bag, bag_factor$cost, mean)
tapply(bag_factor$cost, bag_factor$bag, mean)
# install dplyr
install.package("dplyr")
# install dplyr
install.packages("dplyr")
library("dplyr")
# instal one real data frame example
install.packages("pscl")
library("pscl")
View(presidentialElections)
votes <- presidentialElections[, c("year", "demVote")]
votes <- select(presidentialElections, year, demVote) # equivalent to below R syntax
View(votes)
install.packages("tidyverse")
library("tidyverse")
ggplot2(year, demVote)
ggplot2(presidentialElections$year, presidentialElections$demVote)
install.packages("ggplot2")
library("ggplot2")
install.packages("ggplot2")
ggplot2(presidentialElections$year, presidentialElections$demVote)
ggplot2::aes(year, demVote)
select(presidentialElections, -south)
select(presidentialElections, state:year)
pull(state)
pull(state)
pull(presidentialElections$state)
pull(presidentialElections, state)
presidentialElections$state
presidentialElections$state
filter(presidentialElections, year == 2008, state == "Colorado")
votes_colorado_2008 <- filter(presidentialElections, year == 2008, state == "Colorado") # to filter specific rows
print(votes_colorado_2008)
rename(presidentialElections, demVote, demvote)
rename(presidentialElections, demVote)
select(presidentialElections,demVote)
rename(presidentialElections, demVote)
?rename
rename(presidentialElections, demvote = demvote)
select(presidentialElections,demVote)
rename(presidentialElections, demvote = demVote)
presidentialElections <- mutate(
presidentialElections,
other_parties_vote = 100 - demvote,
abs_vote_difference = abs(demvote - other_parties_vote)
)
rename(presidentialElections, demvote = demVote)
presidentialElections <- mutate(
presidentialElections,
other_parties_vote = 100 - demvote,
abs_vote_difference = abs(demvote - other_parties_vote)
)
View(select(presidentialElections)
View(presidentialElections)
View(presidentialElections)
select(presidentialElections,demVote)
rename(presidentialElections, demvote = demVote)
View(presidentialElections)
presidentialElections2 <- rename(presidentialElections, demvote = demVote)
View(presidentialElections2)
presidentialElections <- mutate(
presidentialElections,
other_parties_vote = 100 - demVote,
abs_vote_difference = abs(demVote - other_parties_vote)
)
View(presidentialElections)
View(presidentialElections)
# to arrange column
presidentialElections <- arrange(
presidentialElections,
desc(year), # equivalent to - year, arrange "year" column in decreasing order
demVote # arrange "demVote" order in increasing order
)
View(presidentialElections)
# to summarise a column by using mean, median, or max
presidentialElections <- summarise(
presidentialElections,
mean_demVote = mean(demVote), # equivalent to - year, arrange "year" column in decreasing order
mean_other_parties_vote = mean(other_parties_vote) # arrange "demVote" order in increasing order
)
print(mean_demVote)
# to summarise a column by using mean, median, or max
presidentialElections <- summarize(
presidentialElections,
mean_demVote = mean(demVote), # equivalent to - year, arrange "year" column in decreasing order
mean_other_parties_vote = mean(other_parties_vote) # arrange "demVote" order in increasing order
)
print(mean_demVote)
print(mean_other_parties_vote)
mean(demVote)
mean(presidentialElections, demVote)
View(presidentialElections)
# to arrange column
presidentialElections <- arrange(
presidentialElections,
desc(year), # equivalent to - year, arrange "year" column in decreasing order
demVote # arrange "demVote" order in increasing order
)
View(presidentialElections)
View(presidentialElections)
# instal one real data frame example
install.packages("pscl")
library("pscl")
View(presidentialElections)
install.packages("pscl")
# to add column
presidentialElections <- mutate(
presidentialElections,
other_parties_vote = 100 - demVote,
abs_vote_difference = abs(demVote - other_parties_vote)
)
View(presidentialElections)
# to add column
presidentialElections <- mutate(
presidentialElections,
other_parties_vote = 100 - demVote,
abs_vote_difference = abs(demVote - other_parties_vote)
)
View(presidentialElections)
View(presidentialElections)
# instal one real data frame example
install.packages("pscl")
library("pscl")
View(presidentialElections)
# instal one real data frame example
install.packages("pscl")
install.packages("pscl")
library("pscl")
View(presidentialElections)
View(presidentialElections2)
View(presidentialElections)
# instal one real data frame example
install.packages("pscl")
install.packages("pscl")
votes <- select(presidentialElections, year, demVote) # equivalent to below Rsyntax, remember column nale is not character string, it's varaiable!
# install dplyr
install.packages("dplyr")
library("dplyr")
install.packages("tidyverse") # this package includes ggplot2 for visualisation
library("tidyverse")
# instal one real data frame example
install.packages("pscl")
library("pscl")
View(presidentialElections)
View(presidentialElections)
library("pscl")
View(presidentialElections)
# instal one real data frame example
install.packages("pscl")
install.packages("pscl")
